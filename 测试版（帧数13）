from flask import Flask, Response, request
from picamera2 import Picamera2
import cv2
import time
import threading
import numpy as np
import os
import signal
import sys
import logging
import socket

import os

# 使用当前用户的主目录
home_dir = os.path.expanduser("~")
log_file = os.path.join(home_dir, "camera_server.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(log_file)
    ]
)
logger = logging.getLogger('camera_server')

app = Flask(__name__)
picam2 = None
camera_lock = threading.Lock()
running = True
last_client_time = time.time()
active_clients = 0
max_clients = 5
clients_lock = threading.Lock()
health_check_interval = 30  # 增加到30秒

# 添加帧超时检测变量
last_frame_time = 0
frame_timeout = 5  # 5秒没有新帧就重启摄像头

# 监控摄像头性能的变量
frame_times = []
fps_stats = {"current": 0, "min": 0, "max": 0, "avg": 0}
stats_lock = threading.Lock()
latest_frame = None  # 存储最新的帧
frame_lock = threading.Lock()  # 用于保护latest_frame

# 用于控制图像处理复杂度的标志
reduce_processing = False  # 默认使用完整处理
frame_counter = 0

def signal_handler(sig, frame):
    global running
    logger.info("正在关闭摄像头服务...")
    running = False
    if picam2 is not None:
        try:
            picam2.stop()
        except Exception as e:
            logger.error(f"关闭摄像头时出错: {e}")
    sys.exit(0)

# 注册信号处理器
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def get_ip_address():
    try:
        # 获取本机IP地址(非回环地址)
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        logger.error(f"获取IP地址失败: {e}")
        return "127.0.0.1"

def reset_camera():
    """重置摄像头，在出现问题时调用"""
    global picam2
    logger.warning("正在重置摄像头...")
    
    with camera_lock:
        if picam2 is not None:
            try:
                picam2.stop()
                logger.info("摄像头已停止")
            except Exception as e:
                logger.error(f"停止摄像头时出错: {e}")
            finally:
                picam2 = None
    
    # 等待一段时间再重新初始化
    time.sleep(2)
    return init_camera()

def init_camera():
    global picam2, last_frame_time
    try:
        if picam2 is not None:
            try:
                picam2.stop()
                time.sleep(2)
            except:
                pass
            picam2 = None
            
        logger.info("初始化摄像头...")
        for attempt in range(3):
            try:
                picam2 = Picamera2()
                
                # 使用基本且稳定的配置
                config = picam2.create_video_configuration(
                    main={
                        "size": (640, 480),
                        "format": "RGB888"  # 改回RGB格式
                    },
                    controls={
                        "FrameDurationLimits": (33333, 33333),  # 约30fps
                        "AwbEnable": True,     # 保持自动白平衡
                        "AwbMode": 1,          # 使用日光模式
                        "Brightness": 0.1,      # 轻微提高亮度
                        "Contrast": 1.0,        # 默认对比度
                        "Saturation": 1.1,      # 轻微提高饱和度
                        "Sharpness": 1.0,       # 默认锐度
                        "ExposureValue": 0.2,   # 曝光补偿
                        "ColourGains": (1.4, 1.2)  # 更温和的红绿增益
                    }
                )
                
                picam2.configure(config)
                time.sleep(1)
                
                picam2.start()
                logger.info(f"摄像头初始化成功 (尝试 {attempt+1}/3)")
                
                # 丢弃前几帧
                for _ in range(10):
                    picam2.capture_array()
                    time.sleep(0.1)
                
                last_frame_time = time.time()
                return True
            except Exception as e:
                logger.error(f"摄像头初始化尝试 {attempt+1}/3 失败: {e}")
                if picam2 is not None:
                    try:
                        picam2.stop()
                    except:
                        pass
                    picam2 = None
                time.sleep(2)
        return False
    except Exception as e:
        logger.error(f"初始化摄像头过程中发生错误: {e}")
        return False

def simple_image_process(frame):
    """简化版图像处理，用于性能不足的情况"""
    # 只做基本增强，不做复杂处理
    try:
        # 基本的亮度和对比度调整
        alpha = 1.1  # 对比度
        beta = 10    # 亮度
        
        # 直接使用OpenCV的基本功能
        adjusted = cv2.convertScaleAbs(frame, alpha=alpha, beta=beta)
        
        # 添加时间戳
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        cv2.putText(adjusted, timestamp, (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        return adjusted
    except Exception as e:
        logger.error(f"简化图像处理出错: {e}")
        return frame

def adjust_colors(frame):
    """改进的颜色调整函数，参考成功案例"""
    try:
        if frame is None or frame.size == 0:
            return None
            
        # 转换为浮点数进行处理
        frame = frame.astype(np.float32)
        
        # 分离通道
        r, g, b = cv2.split(frame)
        
        # 调整颜色通道强度
        r = r * 1.15  # 红色增益
        g = g * 1.0   # 保持绿色不变
        b = b * 0.75  # 降低蓝色
        
        # 检测高亮区域
        brightness = (r + g + b) / 3
        white_mask = (brightness > 200).astype(np.float32)
        
        # 在高亮区域调整颜色
        r = r - white_mask * 10
        g = g - white_mask * 5
        b = b + white_mask * 15
        
        # 整体提亮
        r = r + 15
        g = g + 15
        b = b + 15
        
        # 确保值在有效范围内
        r = np.clip(r, 0, 255)
        g = np.clip(g, 0, 255)
        b = np.clip(b, 0, 255)
        
        # 合并通道并转回uint8类型
        adjusted = cv2.merge([r, g, b])
        adjusted = adjusted.astype(np.uint8)
        
        # 添加时间戳
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        cv2.putText(adjusted, timestamp, (10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        return adjusted
        
    except Exception as e:
        logger.error(f"调整颜色时出错: {e}")
        return frame

def update_fps_stats(frame_time):
    global fps_stats
    with stats_lock:
        # 保留最近10帧的时间
        frame_times.append(frame_time)
        if len(frame_times) > 10:  # 减少保存的帧数以减少内存使用
            frame_times.pop(0)
            
        # 计算FPS
        if len(frame_times) > 1:
            intervals = []
            for i in range(1, len(frame_times)):
                intervals.append(frame_times[i] - frame_times[i-1])
            
            if intervals:
                avg_interval = sum(intervals) / len(intervals)
                fps = 1.0 / avg_interval if avg_interval > 0 else 0
                
                fps_stats["current"] = fps
                if fps_stats["min"] == 0 or fps < fps_stats["min"]:
                    fps_stats["min"] = fps
                if fps > fps_stats["max"]:
                    fps_stats["max"] = fps
                fps_stats["avg"] = (fps_stats["current"] + fps_stats["avg"]) / 2 if fps_stats["avg"] > 0 else fps

def capture_continuous():
    """改进的帧捕获函数"""
    global picam2, running, latest_frame, last_frame_time
    
    logger.info("开始后台帧捕获线程")
    last_successful_capture = time.time()
    
    while running:
        try:
            if picam2 is None:
                if not init_camera():
                    time.sleep(1)
                    continue
                
            frame = None
            try:
                frame = picam2.capture_array()
                
                # 确保帧格式正确
                if frame is not None and frame.size > 0:
                    # 从YUV转换到RGB
                    if len(frame.shape) == 2:  # YUV格式
                        frame = cv2.cvtColor(frame, cv2.COLOR_YUV2RGB_I420)
                    
                    processed_frame = adjust_colors(frame)
                    
                    if processed_frame is not None:
                        with frame_lock:
                            latest_frame = processed_frame
                            last_frame_time = time.time()
                            update_fps_stats(time.time())
                    
                    last_successful_capture = time.time()
                
            except Exception as e:
                logger.error(f"捕获帧异常: {e}")
                if time.time() - last_successful_capture > 10:
                    logger.warning("长时间无法捕获帧，重置摄像头")
                    with camera_lock:
                        reset_camera()
                    last_successful_capture = time.time()
                time.sleep(0.5)
                continue
                
            time.sleep(0.01)  # 控制帧率
            
        except Exception as e:
            logger.error(f"帧捕获线程错误: {e}")
            time.sleep(1)

def generate_frames():
    """生成帧的生成器函数，从latest_frame读取已处理的帧"""
    global running, last_client_time, active_clients, latest_frame, last_frame_time
    frame_count = 0
    start_time = time.time()
    last_fps_log = time.time()
    client_frame_time = time.time()
    
    with clients_lock:
        active_clients += 1
        logger.info(f"客户端连接，当前活跃客户端: {active_clients}")
    
    try:
        while running:
            current_time = time.time()
            
            # 检查最后一帧是否过期
            if current_time - last_frame_time > frame_timeout:
                logger.warning(f"帧超时 ({current_time - last_frame_time:.1f}秒没有新帧)，重置摄像头")
                reset_camera()
            
            # 每15秒记录一次FPS情况
            if current_time - last_fps_log > 15:
                with stats_lock:
                    logger.info(f"FPS统计 - 当前: {fps_stats['current']:.2f}, 最小: {fps_stats['min']:.2f}, 最大: {fps_stats['max']:.2f}")
                last_fps_log = current_time
            
            # 计算帧间隔，限制发送给客户端的帧率
            time_since_last_frame = current_time - client_frame_time
            frame_interval = 1/15.0  # 目标15fps发送给客户端
            
            # 如果距离上一帧时间不足，小睡一会
            if time_since_last_frame < frame_interval:
                time.sleep(0.001)
                continue
            
            # 获取最新处理好的帧
            with frame_lock:
                if latest_frame is None:
                    time.sleep(0.1)
                    continue
                
                frame = latest_frame.copy()
            
            try:
                # 添加FPS信息
                with stats_lock:
                    fps_text = f"FPS: {fps_stats['current']:.1f}"
                
                cv2.putText(frame, fps_text, (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                
                # 检查客户端连接状态
                last_client_time = current_time
                
                # 压缩设置 - 降低质量以提高性能
                encode_params = [cv2.IMWRITE_JPEG_QUALITY, 65]  # 降低到65%质量
                ret, buffer = cv2.imencode('.jpg', frame, encode_params)
                
                if not ret:
                    logger.error("编码帧失败")
                    time.sleep(0.1)
                    continue
                    
                frame_bytes = buffer.tobytes()
                
                # 更新统计信息
                client_frame_time = current_time
                
                # 计算客户端FPS
                frame_count += 1
                if frame_count % 30 == 0:
                    end_time = current_time
                    fps = frame_count / (end_time - start_time)
                    logger.info(f"客户端FPS: {fps:.2f}")
                    frame_count = 0
                    start_time = current_time
                
                # 使用生成器返回帧
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
                
            except Exception as e:
                logger.error(f"发送帧时出错: {e}")
                time.sleep(0.5)
                    
    except GeneratorExit:
        logger.info("客户端断开连接")
    finally:
        with clients_lock:
            active_clients -= 1
            logger.info(f"客户端断开，当前活跃客户端: {active_clients}")

@app.route('/')
def index():
    # 获取当前IP和服务URL
    ip = get_ip_address()
    service_url = f"http://{ip}:8000/video_feed"
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>摄像头流</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                text-align: center;
                background-color: #f0f0f0;
            }}
            h1 {{
                color: #333;
            }}
            .container {{
                max-width: 800px;
                margin: 0 auto;
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            img {{
                max-width: 100%;
                border-radius: 4px;
            }}
            .info {{
                margin-top: 20px;
                padding: 10px;
                background: #e9f7fe;
                border-radius: 4px;
                text-align: left;
            }}
            .reload {{
                display: inline-block;
                margin-top: 10px;
                padding: 8px 15px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }}
            .reload:hover {{
                background-color: #45a049;
            }}
        </style>
        <script>
            // 自动重连功能
            function setupAutoReconnect() {{
                const img = document.getElementById('stream');
                let reconnectTimer = null;
                let errorCounter = 0;  // 正确命名变量
                
                img.onload = function() {{
                    console.log('视频流已加载');
                    errorCounter = 0;  // 使用正确的变量名
                }};
                
                img.onerror = function() {{
                    errorCounter++;  // 使用正确的变量名
                    console.log(`视频流错误 (${{errorCounter}}次)`);
                    
                    if (errorCounter <= 5) {{  // 使用正确的变量名
                        if (reconnectTimer) clearTimeout(reconnectTimer);
                        
                        reconnectTimer = setTimeout(function() {{
                            console.log('尝试重新加载视频流...');
                            img.src = '/video_feed?t=' + new Date().getTime();
                        }}, 2000);
                    }} else {{
                        console.log('多次重连失败，请手动刷新页面');
                        document.getElementById('reconnect-msg').style.display = 'block';
                    }}
                }};
            }}
            
            window.onload = function() {{
                setupAutoReconnect();
                
                // 手动重新加载
                document.getElementById('reload-btn').onclick = function() {{
                    location.reload();
                }};
            }};
        </script>
    </head>
    <body>
        <div class="container">
            <h1>树莓派摄像头流</h1>
            <img id="stream" src="/video_feed" alt="摄像头流">
            <div id="reconnect-msg" style="display: none; color: red; margin-top: 10px;">
                视频流连接出现问题。
                <button id="reload-btn" class="reload">刷新页面</button>
            </div>
            <div class="info">
                <p><strong>服务器IP:</strong> {ip}</p>
                <p><strong>视频流URL:</strong> {service_url}</p>
                <p><strong>活跃连接:</strong> {active_clients}/{max_clients}</p>
                <p>树莓派摄像头服务正在运行</p>
            </div>
        </div>
    </body>
    </html>
    """

@app.route('/video_feed')
def video_feed():
    # 限制最大客户端数量
    with clients_lock:
        if active_clients >= max_clients:
            return "达到最大连接数，请稍后再试", 503
    
    # 返回视频流
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/status')
def status():
    """返回服务器状态信息"""
    with stats_lock:
        status_data = {
            "active_clients": active_clients,
            "max_clients": max_clients,
            "fps": fps_stats,
            "uptime": time.time() - service_start_time,
            "camera_status": "running" if picam2 is not None else "stopped",
            "server_ip": get_ip_address(),
            "reduce_processing": reduce_processing
        }
    return status_data

@app.route('/reset_camera', methods=['POST'])
def reset_camera_endpoint():
    """手动重置摄像头的API端点"""
    success = reset_camera()
    if success:
        return {"status": "success", "message": "摄像头已重置"}
    else:
        return {"status": "error", "message": "摄像头重置失败"}, 500

@app.route('/debug')
def debug_info():
    """返回详细的调试信息页面"""
    with stats_lock, clients_lock:
        debug_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>摄像头调试信息</title>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="5">
            <style>
                body {{ font-family: monospace; padding: 20px; }}
                .stat {{ margin-bottom: 5px; }}
                .error {{ color: red; }}
                .good {{ color: green; }}
            </style>
        </head>
        <body>
            <h1>摄像头服务调试信息</h1>
            <div class="stat">摄像头状态: <span class="{'good' if picam2 is not None else 'error'}">{('运行中' if picam2 is not None else '未运行')}</span></div>
            <div class="stat">服务运行时间: {int(time.time() - service_start_time)}秒</div>
            <div class="stat">最后一帧时间: {int(time.time() - last_frame_time)}秒前</div>
            <div class="stat">活跃客户端: {active_clients}/{max_clients}</div>
            <div class="stat">当前FPS: <span class="{'error' if fps_stats['current'] < 5 else 'good'}">{fps_stats['current']:.2f}</span></div>
            <div class="stat">最小FPS: {fps_stats['min']:.2f}</div>
            <div class="stat">最大FPS: {fps_stats['max']:.2f}</div>
            <div class="stat">处理模式: {'简化' if reduce_processing else '完整'}</div>
            <div class="stat">服务器IP: {get_ip_address()}</div>
            <div>
                <h3>操作</h3>
                <form action="/reset_camera" method="post">
                    <button type="submit">重置摄像头</button>
                </form>
            </div>
        </body>
        </html>
        """
        return debug_html

def health_check():
    """定期检查摄像头状态和服务健康"""
    global picam2, running, last_frame_time
    last_check = time.time()
    
    while running:
        current_time = time.time()
        
        # 每隔设定时间进行一次健康检查
        if current_time - last_check >= health_check_interval:
            logger.info("执行健康检查...")
            
            # 检查最后一帧的时间
            if current_time - last_frame_time > frame_timeout:
                logger.warning(f"帧超时 ({current_time - last_frame_time:.1f}秒没有新帧)，重置摄像头")
                reset_camera()
            
            # 输出当前状态
            with clients_lock, stats_lock:
                logger.info(f"服务状态 - 活跃客户端: {active_clients}/{max_clients}, FPS: {fps_stats['current']:.2f}")
            
            last_check = current_time
        
        # 短暂休眠以减少CPU使用
        time.sleep(1)

if __name__ == '__main__':
    # 记录启动时间
    service_start_time = time.time()
    ip_address = get_ip_address()
    
    try:
        logger.info(f"摄像头服务器开始启动，IP: {ip_address}")
        
        # 在一个新线程中初始化摄像头
        init_thread = threading.Thread(target=init_camera)
        init_thread.daemon = True
        init_thread.start()
        init_thread.join()  # 等待摄像头初始化完成
        
        # 启动后台帧捕获线程
        capture_thread = threading.Thread(target=capture_continuous)
        capture_thread.daemon = True
        capture_thread.start()
        
        # 启动健康检查线程
        health_thread = threading.Thread(target=health_check)
        health_thread.daemon = True
        health_thread.start()
        
        # 启动Flask应用
        logger.info(f"摄像头服务器开始运行在 http://{ip_address}:8000")
        app.run(host='0.0.0.0', port=8000, threaded=True)
        
    except KeyboardInterrupt:
        logger.info("接收到终止信号，关闭服务...")
    except Exception as e:
        logger.error(f"服务器运行出错: {e}")
    finally:
        running = False
        if picam2 is not None:
            try:
                picam2.stop()
            except:
                pass
        logger.info("摄像头服务已关闭")
