from flask import Flask, Response
from picamera2 import Picamera2
import cv2
import time
import threading
import numpy as np
from flask_cors import CORS  # 导入CORS支持

app = Flask(__name__)
CORS(app)  # 启用CORS支持所有路由
picam2 = None
camera_lock = threading.Lock()

def init_camera():
    global picam2
    if picam2 is None:
        picam2 = Picamera2()
        
        # 降低分辨率，提高帧率
        config = picam2.create_video_configuration(
            main={
                "size": (320, 240),  # 降低分辨率
                "format": "RGB888"
            },
            controls={
                "FrameDurationLimits": (16666, 16666),  # 60fps
                "AwbEnable": True,
                "AwbMode": 1,
                "ExposureTime": 10000,  # 降低曝光时间提高帧率
                "FrameRate": 60.0
            }
        )
        
        picam2.configure(config)
        picam2.start()
        time.sleep(1)  # 缩短启动等待时间

def adjust_colors(frame):
    # 简化颜色处理以提高性能
    frame = cv2.convertScaleAbs(frame, alpha=1.1, beta=5)  # 简单的亮度和对比度调整
    return frame

def generate_frames():
    global picam2
    frame_interval = 1.0 / 60.0  # 60fps
    last_frame_time = time.time()
    
    while True:
        current_time = time.time()
        if current_time - last_frame_time < frame_interval:
            time.sleep(0.001)  # 短暂休眠以减少CPU使用
            continue
            
        with camera_lock:
            if picam2 is None:
                init_camera()
            try:
                frame = picam2.capture_array()
                frame = adjust_colors(frame)
                
                # 降低JPEG质量以提高传输速度
                ret, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 60])
                frame_bytes = buffer.tobytes()
                
                last_frame_time = current_time
                
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
                
            except Exception as e:
                print(f"Error capturing frame: {e}")
                time.sleep(0.1)

@app.route('/')
def index():
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Camera Stream</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body { font-family: Arial, sans-serif; text-align: center; margin: 0; padding: 20px; }
            h1 { color: #333; }
            img { max-width: 100%; border: 1px solid #ddd; }
            .container { max-width: 800px; margin: 0 auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Camera Stream</h1>
            <p>如果下面能看到图像，表示视频流工作正常</p>
            <img src="/video_feed" />
            <p>当前服务器时间: """ + time.strftime("%Y-%m-%d %H:%M:%S") + """</p>
            <p>要在ESP32中嵌入此视频流，请使用以下URL: <code>http://192.168.107.172:8000/video_feed</code></p>
        </div>
    </body>
    </html>
    """
    return Response(html, mimetype='text/html')

@app.route('/video_feed')
def video_feed():
    response = Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    response.headers['Access-Control-Allow-Origin'] = '*'
    return response

if __name__ == '__main__':
    try:
        init_camera()
        # 使用线程模式运行服务器
        app.run(host='0.0.0.0', port=8000, threaded=True)
    finally:
        # 确保在程序退出时释放摄像头资源
        if picam2 is not None:
            picam2.close() 
